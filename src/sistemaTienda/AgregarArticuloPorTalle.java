/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistemaTienda;

import claseConectar.Dominio;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nico
 */
public class AgregarArticuloPorTalle extends javax.swing.JPanel {

    /**
     * Creates new form AgregarArticuloPorTalle
     */
    public AgregarArticuloPorTalle() {
        initComponents();
    }
    
    Principal p;
    DefaultTableModel model;
    

    AgregarArticuloPorTalle(Principal p, String idArticulo, String nombreArticulo, FacturaVenta facturaVenta) {
        this.p = p;    
        initComponents();
        cargarTablaTallesParaNuevaFactura(idArticulo, nombreArticulo, facturaVenta);
    }
    
    AgregarArticuloPorTalle(Principal p, String idArticulo, String nombreArticulo, DetalleFacturaVenta detalleFacturaVenta) {
        this.p = p;    
        initComponents();
        cargarTablaTallesParaDetalleDeFactura(idArticulo, nombreArticulo, detalleFacturaVenta);
    }
    
    void cargarTablaTallesParaNuevaFactura(String idArticulo, String nombreArticulo, FacturaVenta facturaVenta){
         try {
             this.title.setText("Agregue la cantidad deseada para el articulo: " + nombreArticulo);
         model = (DefaultTableModel) tableTalles.getModel();
         model = Dominio.eliminarTabla(model); 
         String [] registros= new String[2];
            ResultSet rs = this.p.bd.obtenerTallesPorArticulo(idArticulo);
             while(rs.next()){ 
                 String talle = rs.getString(1);
                 if (!facturaVenta.existeArticuloYTalle(idArticulo, talle)){ //Si no existe en la tabla de facturas lo agrega
                     registros[0]=rs.getString(1); //Talle
                     registros[1]=rs.getString(2)!= null && !rs.getString(2).isEmpty() ? rs.getString(2) : "0" ; //Stock
                     model.addRow(registros);
                 }              
                }
            tableTalles.setModel(model);
            } catch (SQLException ex) {
                 Logger.getLogger(AgregarArticuloPorTalle.class.getName()).log(Level.SEVERE, null, ex);
             }
    }
    
        void cargarTablaTallesParaDetalleDeFactura(String idArticulo, String nombreArticulo, DetalleFacturaVenta detalleFacturaVenta){
         try {
             this.title.setText("Agregue la cantidad deseada para el articulo: " + nombreArticulo);
         model = (DefaultTableModel) tableTalles.getModel();
         model = Dominio.eliminarTabla(model); 
         String [] registros= new String[2];
            ResultSet rs = this.p.bd.obtenerTallesPorArticulo(idArticulo);
             while(rs.next()){ 
                 String talle = rs.getString(1);
                 if (!detalleFacturaVenta.existeArticuloYTalle(idArticulo, talle)){ //Si no existe en la tabla de facturas lo agrega
                     String id_talle = rs.getString(3);
                     int stockInicial = rs.getString(2)!= null && !rs.getString(2).isEmpty() ? Integer.parseInt(rs.getString(2)) : 0 ; //Stock Inicial    
                     int stockAnterior = this.p.bd.obtenerCantidadVendidaDeFacturaPorArticuloYIdTalle(idArticulo, id_talle, detalleFacturaVenta.id_factura);
                     int nuevoStock = stockInicial + stockAnterior; 
                     
                     registros[0]=rs.getString(1); //Talle                  
                     registros[1]= String.valueOf(nuevoStock);
                     model.addRow(registros);
                 }              
                }
            tableTalles.setModel(model);
            } catch (SQLException ex) {
                 Logger.getLogger(AgregarArticuloPorTalle.class.getName()).log(Level.SEVERE, null, ex);
             }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTalles = new javax.swing.JTable();

        title.setText("Agregue la cantidad deseada para el articulo");

        tableTalles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Talle", "Stock Disponible", "Cantidad a Agregar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableTalles);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(title)
                .addContainerGap(99, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableTalles;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    public JTable getTableTalles() {
        return tableTalles;
    }

    public void setTableTalles(JTable tableTalles) {
        this.tableTalles = tableTalles;
    }

    public DefaultTableModel getModel() {
        return model;
    }

    public void setModel(DefaultTableModel model) {
        this.model = model;
    }

    
    
}
